------------------------------

修改合约的时候，在收款的地方检查 first_receiver。

推广的时候，低调，说现在基于EOS，以后有了类似功能的链，再迁移过去。

发在广告专区的贴子，token被领完之后，可以再给贴子加token。广告专区中的贴子按照token数量来排序显示，其它专区中的贴子不按token数量排序显示。





Wingon Niu.Web3:
我最近开发完成一个基于EOS的dapp，已经部署上线运行，如果大家有兴趣可以看看，下面是一个简单的基本介绍：

通用名称服务CNS
https://common-name-service.netlify.app/home.html

通用名称服务，基于EOS的一个名称解析服务，可以将名称解析成为btc/eth等等多个常见主流区块链地址以及微博地址/QQ号码等等其他种类的内容。名称可以使用中文、英文、符号、世界其他语言。名称的所有权由用户永久持有。名称可以交易。用户可以与dapp系统分享收入。

dapp系统的详细介绍可以点击本dapp页面右侧上方的“中”字小图标，将页面切换到中文，再点“中”字右边的小图标，打开菜单，点击里面的“系统说明”菜单。

为了使用本dapp系统的完整功能，建议使用电脑上的谷歌浏览器+Anchor钱包。目前使用手机只能查看dapp页面的内容，不能进行需要钱包签名的操作。

通用名称服务
https://common-name-service.netlify.app/home.html

Hello, I recently developed an EOS-based dapp, which has been deployed and put into operation. Here is a brief introduction:

Common Name Service
https://common-name-service.netlify.app/home.html

Common Name Service, a name resolution service based on EOS, can resolve names into many common mainstream blockchain addresses such as btc/eth, and other types of content such as Twitter addresses. Names can be in English, symbols and other languages in the world. The ownership of the name is permanently held by the user. Name can be traded. Users can share revenue with dapp system.

For detailed introduction of dapp system, click the small icon at the top right of this dapp page, open the menu, and click the "System  introduction" menu inside.

In order to use the full functions of this dapp system, it is recommended to use Google chrome browser + Anchor wallet on the personal computer. At present, you can only view the contents of the dapp page on your mobile phone, and you cannot perform operations that require wallet signature.

标题：本项目的扩展性与实用性

本项目在已有功能的基础上，可以进行扩展，成为一个链上全能记录本，所有在生活中需要记下的东西，用人脑可能又记不住的，或者有纪念意义的东西，都可以记在本dapp中，放在链上，不会丢失。比如女朋友的生日、结婚纪念日、甚至情书等等，都可以通过本项目记录到EOS链上。用户只需要记住一个容易记忆的名称，就可以随时查出别的信息。当然，千万不要把有关隐私或者秘密的东西记录到本dapp。

作为一个链上全能记录本，本项目是具有一定的实用性的。

另外，在本项目中注册的名称，还会成为可以登录并使用另一个dapp项目的用户名。

标题：本项目的生存时间长，不会倒闭

基于EOS链开发的本系统，有一个特点或者优势，就是我不需要运行自己的服务器，一台都不需要。所有的用户数据都保存在EOS链的内存中，dapp的前端页面托管在netlify这个专业的托管平台。

而基于其他链的dapp项目，大部分项目方都需要运行自己的服务器，比如数据库服务器、后端服务器、前端服务器。如果没有这些服务器，dapp就不能正常运行。而运行这些服务器，需要不少资金成本，特别是长期运行这些服务器。

现在的整体市场处于熊市，很多这样的dapp项目没有收入或者收入很少，但是还需要支付服务器费用，资金压力大。一旦熊市持续时间长了，有的dapp项目的资金就支持不住了，或者项目方的信心消耗殆尽了，在这种情况下，项目方可能就会关闭服务器。服务器一关，dapp就无法访问，用户就会流失，项目就更加没有收入，最后的结果只有一个，项目失败，然后消失。

一轮熊市过去，很多dapp消失了。这些消失的dapp有一个共同点，就是服务器关闭了。

而本dapp项目，因为不需要运行自己的服务器，所以不需要支付服务器费用，也没有其他方面的资金支出，不管是在牛市还是熊市，就算本dapp长期没有收入，也没有任何的资金压力，不存在关闭服务器造成dapp无法访问的问题。

从项目架构来看，别的大部分dapp项目，项目方的人员、项目方运行的服务器，这是两个不可或缺的中心、缺一不可的中心。而本项目没有运行服务器，因此减少了一个中心，总体上提高了去中心化的程度，拥有了别的dapp项目没有的优势。也许在将来，考察一个dapp项目是否是去中心化的，有没有服务器会是一个重要的指标。

综合起来就是，本dapp项目的生存周期很长，可以长时间正常运行，正常运行十年以上、二十年以上或者更长时间都是可以的。在这么长的时间里，区块链世界的各种dapp项目已经换了一茬又一茬了，但是本dapp项目一直都在正常运行。也许在本项目正常运行三年、五年的时候，穿越一轮牛熊还正常运行的项目，已经所剩不多了，到时本项目可能会引起更多用户的注意，吸引来更多的用户。也可能引起投资机构的注意，得到投资。到了这个时候，用户在本项目拥有的名称，都会有升值空间，特别是最早的前512个名称，可能升值空间很大。

这就是时间换空间，只要生存时间长，等到同类项目、竞争对手都消失的时候，就有机会成为最后的成功者。

标题：关于名称的稀缺性讨论

这几天有用户看了dapp项目，提到一个问题，就是名称区分了大写和小写字母，这样的话，好名称容易被模仿，可能出现很多仿品，从而降低了好名称的稀缺性，不利于好名称的长期升值。

关于这个问题，从用户的角度考虑，是正常的、合理的。我曾经也为这个问题犹豫了好几天，最后我想到了另一个问题，这才确定下来。

另一个问题是什么呢，就是因为本项目是开源的。如果本项目以后真的做起来了，或者做的有了起色，那么别人很容易把代码复制一份，简单改改，然后一个同样功能的项目就出现了。就算本项目不开源，别人从头开始，开发一个同样的项目，也不是难事。

这样最后的结果就是两种，一种是本项目做不起来，没几个用户，那么名称稀有不稀有，意义也不大。另一种是，项目做起来了，但是仿制品项目也出来了，有可能出现两三个仿制品项目。这种情况下，好名称在本项目里面有稀缺性，但是项目本身没有稀缺性了。用户在本项目中拥有的好名称，很可能在仿制品项目中，被别人抢注了。这是让人很郁闷的事。

由于本项目现在没有拥有像ENS那样的头部项目和原创品牌优势，所以用户难以对本项目有很强的忠诚度，如果在本项目的仿制品项目中能够注册到一样的好名称，用户随时会从本项目跑到仿制品项目中。

因此从这个角度看，特别重视名称在本项目的稀缺性，好像意义不是很大。毕竟我们只能控制本项目，控制不了仿制品项目。在币圈，一个稍微好点的项目，都会有几个仿制品，很常见的现象了。用一个流行的词语来说，就是太卷了，内卷严重。





Wingon Niu.Web3:
标题：与ENS的差异化竞争

本项目第一阶段的宣传推广，主要是在现有的柚子圈，但这不是终点。下一个阶段，我们会走出柚子圈，去别的链的圈子里推广，特别是去ETH圈推广，去抢ENS的用户。

有人可能会说我这想法有点异想天开、不自量力了。但是在两种情况下，这个想法还是有实现的可能性的。哪两种情况，后面再说，先说一下我为什么会产生这个想法，去和ENS抢用户。

如果从基本功能的角度来说，将名称解析出btc/eth地址，本项目也是模仿的ENS，本项目也是ENS的仿制品。作为仿制品，没有头部地位和品牌优势，怎么去和原创作品竞争呢？靠的就是差异化。原创作品拥有的功能，我们要有。原创作品没有的功能，我们也要有。如果本项目有几个具有吸引力的差异化之处，那么从ENS拉一小部分用户过来，是有可能实现的。

本项目和ENS的差异化之处，有这么几个：

1. 用户在ENS注册的名称，是租用的。租期到了之后，如果用户不再续费或者忘了续费，名称就没了，或者被别的用户买走了，用户会失去这个名称。而在本项目注册的名称，由用户永久持有，用户拥有名称的完整所有权。不像ENS那样，名称是租用的，用户只享有租期内的使用权。

2. 费用问题。在ENS，短一些的名称或者好一些的名称，租金是挺贵的，租期到了之后还得续费。ENS项目方已经被人抱怨过了，说他们太贪心，把租金定的那么贵。而本项目，一次付费，永久拥有，并且价格相比ENS的租金价格便宜不少。

3. 本项目有多种方式，用户可以与本项目分享收益，详情可以到dapp页面的系统说明里查看。而ENS里面，用户与项目分享收益的方式比较单一，我只发现一种方式，具体情况请您自己到ENS查看。

4. 名称本身的对比。ENS中的名称，固定用.eth这个后缀，后缀前面的部分，只可以使用英文小写字母和数字，可能还允许少数几个特殊符号。用户在给自己制定名称的时候，受的限制太多。而本项目，正好与ENS相反，用户可以决定自己的名称要不要后缀、要哪个后缀，名称可以使用中文、英文、法文、德文等各国语言，可以使用各种符号、数字等等。我把这个特点，叫做名称格式与名称风格的多样性。在本项目，用户可以按照自己的喜好，充分发挥想象力，制定出自己最喜欢的名称。

可能对于有的用户，名称只是一个字符串，随便用一个就可以。但是对于有的用户，名称就是一个很讲究、很重要的东西，不会随便用一个的，是会精挑细选、仔细考虑之后才会制定一个。本项目的名称格式与风格的多样性，特别适合这个用户群体，可以让他们精心制定自己最喜爱的专属名称。事实上，本人就属于这个用户群体。我虽然也在ETH生态使用一些dapp，但是从来不用ENS，因为我特别不喜欢.eth这个强制给我的后缀。很多人都说以后是Web 3.0的时代，所以我最喜欢.Web3这个后缀。现在，在本系统，我已经如愿以偿地拥有了以.Web3为后缀的名称了。

以上就是本项目与ENS的几个差异化之处。

接着说开头提到的两种情况，在这两种情况下，从ENS抢一小部分用户过来是有可能的。

第一种情况，用户在ENS的名称，租期到了。可能有一部分用户，付费在ENS租了名称之后，在租期内，根本没有使用过几次。现在租期到了，用户会犹豫，还要不要续费。续费吧，可能又是长期放着不用。不续费吧，以后万一有用的着的时候怎么办。如果费用很便宜，就不用犹豫，续费就是了。但是费用偏偏不便宜。所以用户可能会进退两难，犹豫不决。在这种情况下，就是本项目的机会。对于正在犹豫是否要在ENS续费的用户来说，一次付费、永久拥有、而且价格便宜、还有可能与项目分享收益、名称还可以自由定制、可以拥有一个更好的名称、解析功能也比ENS丰富。这样的系统，对用户来说，是有吸引力的。因此，这一类用户，是有可能从ENS转到本项目的。

第二种情况，新加入币圈的用户。在币圈，如果是一个好几年的老用户，那么很可能在EOS上产生过亏损，对EOS有不满的情绪，甚至会对基于EOS链的dapp项目产生抵触心理，他们已经离开了EOS圈子。对于这样的币圈老用户，短期之内，可能难以改变他们的想法，我们只能尽力而为，尝试推广，顺其自然。而如果面对的是新加入币圈的新用户，他们没有历史包袱，没有历史恩怨，对EOS没有不良情绪，没有抵触心理。这个币圈新用户群体，如果抛开ENS的头部地位和品牌，单纯从系统功能的角度来做选择的话，我相信其中一部分用户，面对前面描述过的几个差异化之处，是会选择本项目的。在未来，会有越来越多的币圈新用户，这也是本项目的机会。

标题：DAO治理与空投

本项目未来会以DAO的形式进行治理。

本项目最早注册的前512个名称的拥有者，拥有DAO治理的投票权限。

并且，从用户注册第512个名称之后开始，本项目产生的收入中的15%，会按照一定的时间间隔，空投给最早的前512个名称的拥有者。空投会以EOS、BTC、ETH三种之一进行空投。

本项目的功能，包括名称格式与风格的多样性，这样的功能，未来是否需要修改，修改成什么样子，这些都会由DAO来治理，通过投票来决定。

以上是我现在关于DAO的初步想法，具体细节，等以后再确定。

标题：下一步执行计划

当本项目的早期用户数量达到30人左右的时候，我会按照在群里聊的，把打折优惠返还给早期用户，用户创建的每个名称可以返还30%的费用，我会用我手机钱包的账户直接转EOS给每个名称拥有者的EOS账户。

当本项目的早期用户数量达到512人左右的时候，就开始建立DAO，后续本项目产生的收入，就可以进行空投。

关于本项目还有以下几个方面的介绍：

1. 本项目的扩展性与实用性
2. 本项目的生存时间长，不会倒闭
3. 关于名称的稀缺性讨论
4. 与ENS的差异化竞争
5. DAO治理与空投
6. 下一步执行计划

写的有点长，发在群里怕占用太多屏幕，有兴趣了解的同学，请发我私信，我单独发。

谢谢！

待办：
建doc目录，项目简介双语，Todo（本文）

系统说明单独一个页面

项目简介中加入其他几个介绍和所有条目的目录
在dapp的系统说明开头也加上所有条目的目录
文档内容微调
512个名称修改为512个名称或者用户
翻译

文档后面加上：直接查询名称解析的方法
        用户可以在dapp内查询名称的解析，也可以直接访问以下3种链接进行查询：
        1
        2
        3
        第1种和第2种会返回一个json字符串，内部含有解析出的内容。
        第3种只返回解析出的内容。
        注意，只有当名称完全由符合URL规则的字符组成时，才可以使用这个查询方法。否则，必须对名称进行URL编码之后，才可以使用这个查询方法。当用户在本系统中创建了风格或者格式多样性的名称时，可能需要对名称进行URL编码之后，才可以使用这个查询方法，请注意这一点。

改bug，找到源代码

名称列表中加上名称的id

实现从网页直接解析的功能，返回json
resolve.html?name=aaa&target=nostr
返回：
{name: "aaa", nostr: "nnnnnnnnn"}
本功能由通用名称服务提供: 
https://....../home.html

实现从网页直接解析的功能，只返回内容
resolve.html?name=aaa&target=nostr&json=false
返回：
nnnnnnnnn

解析nostr/damus和女朋友生日等等文档中出现的内容

nostr/damus: 
npub1a2j8h5wf5p2ldaqqz7z7cj2h6rpsnuw27xqvm8l4aaalajgj52ysszqdqg

——————————————————

名称服务   成为nostr应用
论坛           成为nostr应用
使用BA的存储链

把写的很长的那些内容放在一个文档里面，然后精简一下内容，重新写一个文档。
通用名称服务，同时也是一个链上记事本（不再提扩展性，直接就是）。
在本系统创建的名称，可以作为用户名登录使用永存开放空间dapp（此dapp和功能正在开发中）。
解析nostr/damus/todo/女朋友生日等等，再加上其他热门链的地址，总共80多种。

原来的名字
新的名字
新的网址
现有功能
    现有功能都列出来。
    只有梦想和现实两个分类。
准备开发的新功能
    支持多个分类点赞打赏用户密码，综合性论坛。
    用户名可以使用通用名称服务里创建的名称。
    用户可以无感知使用EOS区块链。
时间计划
产品的最后形态
提示用户，当新功能开发完成上线时，合约中的旧数据会被全部清除的，所以先不要实际使用本系统，只可以试验使用。

梦想现实笔记，EOS账户、智能合约、前端都原样保留，独立存在的自留地。
永存开放空间，新的项目，不从梦想现实笔记fork，防止受到前端自动化部署的影响（应该是没有影响）。
新建项目，复制全部代码过来，进行复制校验，确保代码完全一致。
对一致，然后把Tab都改成空格，对一致，然后用git相关工具检查确认只有Tab被改成了空格。
Readme中写上：本项目的初始代码复制自梦想现实笔记，以后是两个相互独立的项目，年月日。
修改代码中各处的项目名字，以及存入Arweave中的Tag名字，等等，用grep进行多文件搜索。
继续开发。
从此成为两个互相独立的项目。

广告推广专区，贴子列表中显示每个贴子未被领取的剩余广告费，并按剩余费用降序排列。
用户先支付一定数额的广告费，有了费用记录，才可以在广告推广专区中发贴，发贴后记录删除。
每个广告贴最低10EOS，最多不限。
广告费的15%由系统收取。
广告费的85%，由广告主自己决定分为8到512份，用户在进入广告贴之后，点击下方的领取按钮，领取其中一份。每个用户只能领取一次。最少8份，最多512份，由系统设置决定。
只有真实用户才可以领取广告费。
每个贴子增加几个字段：初始广告费、剩余广告费、分为多少份、每份广告费、已领用户列表（EOS原生账户名）。
表增加一个索引，用于广告推广专区，按剩余费用降序排列。
上面的几个数字做成参数配置。
必须使用通用名称服务中创建的名称，才能登录使用本系统，不支持原生EOS账户登录使用。

整理梦想现实笔记中已经发布的文章、回复、图片和视频，哪些需要发布到永存开放空间，哪些不需要。发布需要的到永存开放空间。

为了在未来可能实现项目合规，项目有一个监管功能，可以删除违法、违规、虚假的内容。
文章表、回复表、图片表都加上一个标记字段，用于标记条目是否是违法、违规、虚假。
文章表、回复表、图片表都加上几个保留字段，字符串类型，备用。

keepmoving.web3
keepcoding.web3
keeptalking.web3

项目的名字就叫通用名称服务，和链上记录本。在不同的场景有不同的推广方式。
如果是在nostr群，如下进行推广：
有一个类似ENS的dapp，在里面注册一个名称，可以把这个名称解析出nostr地址。
比如我注册了一个名称，keepmoving.web3，然后给这个名称添加了一条nostr的解析记录，以后就可以直接通过访问xxx?name=x&target=nostr&json=true来获取我的nostr地址了。
如果可以的话，下面发送项目简介。

keepmoving.nostr
keepmoving.damus

两层分类。
广告专区必须付费，其他专区可以付费也可以不付费。
历史，2018年开始到现在5年时间，如果基于eth是赚10倍，而现在基于eos是损失10倍。总体来说是100倍的差距。做了2个dapp大家看看吧。
支持三个链的原生账户或者地址。有了用户和密码之后，如果有中心化服务器，那么发到arweave的可以使用arseeding由服务器代发，如果没有中心化的服务器，那么发到arweave的使用eth上的everpay代为付费发送。发到eth的由用户使用钱包自己签名发。做好之后，一边推广一边申请三个链的grant。
以后实现只有经过了真人认证的才可以领取贴子中发放的token。

登录可以选择eos原生账户或者用户密码。发到arweave可以选择使用arconnect原生地址、eth上的metamask+everpay代发、服务器代发。发到eth的只能使用metamask来发。

注意一下零宽字符的问题

a. 监管有删除功能，版主有移出功能
b. 命名规则与ENS一致
c. 金额用作排序的时候，要检查一下

d. 时间改成uint64_t，毫秒，参与排序时如果超出长度，改为sha160类型

e. 用EOS原生账户给name充值或者提现，name有了余额后可以进行付费和打赏，打赏直接给到原生账户。创建或者购买name之后，可以开通密码功能，（owner，伴随账号，name，hash），并同时设置密码，密码hash保存到服务器数据库。用户使用name和密码登录后，发出操作请求，服务器端调用脚本发出交易，使用一个特殊原生账户进行签名。服务器端需要安装钱包并且放进active key。

e. 了解一下如何使用cookie保持登录状态、退出或者超时退出、设置密码同时退出、一处登录其他处退出。

f. 版块分为必须付费和可选付费两种类型。

g. 回复也可以点赞、打赏。

e. 对name直接就是一个设置密码功能，设置密码同时退出登录状态，任何时候都可以设置密码。

e. 伴随账号必须要。

e. 第一步做到：原生账户不能领钱，只有name可以领钱。第二步做到：只有经过真人认证的name才可以领钱。

e. 使用name和密码功能进行发送，如果遇到处在未登录状态而报错时，登录后可以断点续传。

b. 不可以有英文空格和很多英文标点符号，英文必须全部小写，其他语言不限制大小写。

e. 用来做真人认证的推特账号必须是全表唯一的。真人认证过的name也是可以买卖的，买卖过后依然是真人认证有效的。推特认证的那个贴子在认证后是可以删掉的。重点在于让每个推特账号只能用来认证一个name。

e. 伴随账号不用真的创建出来，它只是用来与name做对应的，也用来在表中当做一个原生账户。伴随账号使用.ag后缀，因为这个后缀是我的，不会用这个后缀创建实际的原生账号的，以防与伴随账号冲突。

e. 如果有多个系统共用相同的name和密码，则这些系统需要有各自独立的登录状态。

e. 为name设置密码时，客户端需要用name的owner的某个密钥对发出的请求进行签名，通过https将请求发送到服务器端，服务器端检验过签名后，才可以把密码hash存入数据库，再返回成功信息。加上签名和检验签名的动作，以防可以随便设置任何一个name的密码，只有name的owner才可以设置name的密码。

h. 点击页面右上角菜单按钮，弹出菜单中放上选择版块功能，点击则弹出窗口，在里面列出所有的二层版块。在第一次弹出的时候从链上获取版块数据并保存起来，以后不再每次点击时获取。

i. 提问：开发了一个基于EOS的智能合约和dapp，如何才能为一个EOS原生账户设置一个密码，可以使用EOS原生账户和对应的这个密码登录dapp，在dapp中调用智能合约的各个功能？

j. 提问：在一个智能合约中能否查询另一个智能合约的multi index table中的数据？

m. 在合约的action中，注意先修改表中的数据，再发送转账交易。检查：先修改表中的数据之后，如果这个action被又一次进入，会不会再次执行。



p. 多层分类，一个表，两个索引，cn=  en=。

q. 删除名称的时候，同时删掉绑定关系。
q. 用户名密码系统实际上就是由.ag账户在操作，前端只是在显示的时候进行了对应，合约中不需要查询别的合约中的数据。

q. 两种账务信息：原生账户或与名称对应的.ag账户，实际都是原生账户。
充值：从原生账户到任意原生账户或任意名称对应的.ag账户。
提现：从原生账户或名称对应的.ag账户到任意原生账户。
消费：先充值进账务信息，再消费。
领钱：领钱进入账务信息，只有名称对应的.ag账户可以领钱。
点赞、踩：原生账户与名称对应的.ag账户都可以。
打赏：本身属于消费。如果是打赏柚子，则打赏进入账务信息。如果打赏其他，则显示对应有解析的地址。

----------------------------------------------------------------------------------------------------

提前创建多个.ag账号，并且设置owner里面的ns@eosio.code，给每个账号转入1EOS（或者0.3EOS，可以不被3级名称薅羊毛），将每个账号加入到ns合约的绑定表中，待用。

首先创建ag账号，然后由ag账号创建.ag账号。

建立shell目录和两个子目录：dev和prod，分别存放脚本和文件。

a_target_accounts.txt   待处理的目标账号列表，多行文本文件，每行一个账号。aaaaaaaaa.ag
b_my_env.sh             保存cleoslocal别名、公钥、Token字符串等信息。由别的脚本文件进行source引入。
c_create_account.sh     创建
d_set_eosio_code.sh     设置
e_transfer_token.sh     转入
f_add_to_bind_table.sh  加入
g_query.sh              查看

----------------------------------------------------------------------------------------------------

用户设置密码，需要首先验证发起请求的是名称的真实的拥有者，有两种验证方法：
1. 名称和密码要由名称的owner进行数字签名，再发送到服务端，服务端验证数字签名。此方法实现起来比较难，所以使用的是下面的第2种方法。
2. 步骤如下：
    第一次交互：
        用户端发起请求，准备设置密码，向服务端上传名称和随机的client_check_code。服务端需要检查名称是否存在，如果不存在，则返回错误信息。
        服务端收到请求，生成随机的server_check_code，保存名称、client_check_code、server_check_code，并返回server_check_code。
        用户端收到server_check_code，用户端发送交易，合约处理交易，为名称绑定一个没有被绑定的.ag账号，并且将hash(client_check_code+server_check_code)保存到绑定表中的check_code_hash字段。
    第二次交互：
        几秒钟后，用户端发送设置密码的请求，向服务端上传名称、密码hash、client_check_code。
        服务端检查此名称是否有对应的client_check_code和server_check_code。如果没有，则说明此次请求跳过了第一次交互，是非法请求，直接返回错误信息。如果有，则继续进行下面的步骤。
        服务端检查收到的client_check_code是否与保存的client_check_code一致。如果不一致，则说明同时存在多次请求或者多次交互，发生了错乱，直接返回错误信息，并且清除服务端保存的client_check_code和server_check_code。如果一致，则继续进行下面的步骤。
        服务端生成hash(client_check_code+server_check_code)，与名称对应的智能合约中的绑定表中的check_code_hash字段内容进行对比。
            如果不一致，则说明这是虚假的用户在冒充名称的拥有者设置密码，直接返回错误信息，并且清除服务端保存的client_check_code和server_check_code。
            如果一致，则说明这是名称的真正的拥有者在设置密码，则继续进行下面的步骤。

服务端清除为名称保存的client_check_code和server_check_code，服务端为名称生成：随机数1、随机数2、随机数3，保存hash（密码hash+随机数1），给客户端返回随机数2和3。
客户端保存hash（密码hash+随机数2），然后hash（hash（密码hash+随机数2）+随机数3），以此hash作为种子，产生密钥对。
客户端发送交易，合约处理交易，修改名称对应的.ag账号的active公钥为上一步产生的公钥，并且清除名称对应的智能合约中的绑定表中的check_code_hash字段内容。
为了防止被薅羊毛，3级名称不可以设置密码，需要在合约和服务端两个地方做检查。（如果每个.ag账户只存入0.3EOS，则不需要这个限制。）

用户使用名称和密码登录，服务端验证密码是否正确，如果正确，则返回随机数2和JWT。
客户端保存hash（密码hash+随机数2），不保存随机数2，保存JWT。

用户获取随机数3，服务端验证JWT，正确则返回随机数3。
客户端进行hash（hash（密码hash+随机数2）+随机数3），以此hash作为种子，产生密钥对，保存私钥到js变量。
注意，在用户首次设置密码或者后来修改密码的时候，有一个字段标明了密码的更新时间点。验证JWT的时候，需要检查JWT的签发时间如果在这个更新时间点之前，则说明用户修改了密码，用户需要使用新密码重新登录。

用户发送交易时判断用户是使用原生账号还是名称，如果是使用名称和密码登录后发送交易，则检查cookie中是否有hash（密码hash+随机数2）和JWT。如果都有，则直接到下一步。如果缺少任意一个，则提示用户需要先进行名称密码登录操作。用户登录之后可以进行断点续传。
用户登录状态正常后，检查js中是否有私钥。如果有，则直接签名发送交易。如果没有，则先进行用户获取随机数3的动作，成功后保存私钥到js变量中，接着就可以签名发送交易。

为用户代付CPU/NET，现在可以在用户发送交易前，先执行购买资源的操作，然后再发送交易。每个名称绑定的.ag账号有0.3EOS，可以发送很多次交易。
这个需要在公共测试网上进行测试，到时要在公共测试网上面建立所需的测试账号等等测试环境，需要了解如何在测试网上面创建ag账号和.ag账号。
为了防止被薅羊毛，3级名称不可以设置密码，需要在合约和服务端两个地方做检查。（如果每个.ag账户只存入0.3EOS，则不需要这个限制。）

----------------------------------------------------------------------------------------------------

查看所有关注用户发表的所有最新文章功能，合约中增加索引，前端功能以后再做。

当前用户可以在一个页面里面查看所有关注的用户发表的文章列表，包括在所有的版块发表的文章，按照文章发表的时间降序排列，新文章显示在上边的位置。
需要在文章表中加入一个联合索引，按照文章的发表时间降序与文章的id降序排列。
按照这个索引查询遍历所有的文章，如果文章的作者是当前用户关注的，则显示这个文章出来，如果不是当前用户关注的，则不显示。
在翻页的时候，可能出现本页没有内容，但是后面的页中会有内容。哪一页有内容，是不确定的。
需要提前获取到当前用户关注的用户的列表。

----------------------------------------------------------------------------------------------------

系统2022年7月上旬已经上线，2022年8月上旬更新了代码，看看更新了什么内容。

----------------------------------------------------------------------------------------------------

原生账户拥有的名称，设置主名称的功能，在页面上做出来。打赏时会用到。

----------------------------------------------------------------------------------------------------

本次先不实现用户名和密码的功能，下一个版本再实现。

----------------------------------------------------------------------------------------------------

一个原生账户，必须拥有通用名称服务中的一个或者多个名称，这样的原生账户，才可以领取帖子中附带的钱。
以后再实现检查名称是否经过了真人验证的功能，只有经过了真人验证的名称，对应的原生账户，才可以领钱。

----------------------------------------------------------------------------------------------------





